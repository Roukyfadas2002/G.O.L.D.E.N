import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms'; // ‚úÖ N√©cessaire pour `ngModel`
import { CommonModule } from '@angular/common';

export interface ReservationDetails {
  clientId: number;
  chambreId: number;
  dateDebut: string;
  dateFin: string;
}

@Component({
  selector: 'app-reservation-dialog',
  standalone: true,
  templateUrl: './reservation-dialog.component.html',
  styleUrls: ['./reservation-dialog.component.css'],
  imports: [CommonModule, FormsModule] // ‚úÖ Ajout de FormsModule
})
export class ReservationDialogComponent implements OnInit {
  @Input() visible = false;
  @Input() chambreId: number = 0;
  @Input() chambreNom: string = '';
  @Output() close = new EventEmitter<void>();
  @Output() confirm = new EventEmitter<ReservationDetails>();

  reservation: ReservationDetails = { clientId: 0, chambreId: 0, dateDebut: '', dateFin: '' };

  ngOnInit(): void {
    // üî• R√©cup√©ration du client connect√©
    const storedId = localStorage.getItem('clientId');
    if (storedId) {
      this.reservation.clientId = parseInt(storedId, 10);
      console.log("‚úÖ Client ID r√©cup√©r√© :", this.reservation.clientId);
    } else {
      console.warn("‚ö†Ô∏è Aucun utilisateur connect√© !");
    }

    // üî• V√©rification du `chambreId`
    if (this.chambreId > 0) {
      this.reservation.chambreId = this.chambreId;
      console.log("‚úÖ Chambre ID affect√© :", this.chambreId);
    } else {
      console.error("‚ùå Erreur: `chambreId` est invalide !");
    }
  }

  /**
   * ‚úÖ V√©rifie si la r√©servation est valide
   */
  isValid(): boolean {
    if (!this.reservation.clientId) {
      console.warn("‚ö†Ô∏è Aucune ID client trouv√©e !");
      return false;
    }

    if (!this.reservation.chambreId) {
      console.warn("‚ö†Ô∏è Aucune chambre s√©lectionn√©e !");
      return false;
    }
    
    if (!this.reservation.dateDebut || !this.reservation.dateFin) {
      console.warn("‚ö†Ô∏è Dates de r√©servation manquantes !");
      return false;
    }

    const dateDebut = new Date(this.reservation.dateDebut);
    const dateFin = new Date(this.reservation.dateFin);

    if (dateDebut >= dateFin) {
      console.warn("‚ùå Date de fin invalide !");
      return false;
    }

    return true;
  }

  onCancel(): void {
    console.log("‚ùå Annulation de la r√©servation");
    this.close.emit();
  }

  onConfirm(): void {
    console.log("üì° Tentative de r√©servation avec :", this.reservation);
  
    if (!this.isValid()) {
      console.error("‚ùå Donn√©es manquantes pour la r√©servation !");
      return;
    }
  
    console.log("‚úÖ R√©servation confirm√©e :", this.reservation);
    this.confirm.emit(this.reservation);
    this.close.emit();
  }
}